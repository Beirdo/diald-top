dnl Process this file with autoconf to produce a configure script.

dnl Configure the initialization
AC_INIT([diald-top],[2.1pXX],[gjhurlbu@beirdo.ca])
AC_COPYRIGHT([(c) 1996-2003 Gavin J. Hurlbut])
AC_REVISION([$Revision$])
AC_PREREQ(2.53)
AC_CONFIG_SRCDIR(client/diald-top.c)
AC_CONFIG_HEADER(config.h)

dnl define the Auxiliary dir for scripts and stuff
AC_CONFIG_AUX_DIR(scripts)

AC_PROG_AWK

dnl check host type
AC_CANONICAL_SYSTEM


dnl check package version - formatted like: 2.1pl4
AC_MSG_CHECKING(version of the package)
if test -f .version ; then
  VERSION=`cat .version`
else
  VERSION="0.0pl0"
fi
changequote(<<, >>)dnl
VERSIONMAJOR=`echo $VERSION | $AWK 'BEGIN {FS="[.pl]"} {printf("%d", $1)}'`
VERSIONMINOR=`echo $VERSION | $AWK 'BEGIN {FS="[.pl]"} {printf("%d", $2)}'`
VERSIONPATCH=`echo $VERSION | $AWK 'BEGIN {FS="[.pl]"} {printf("pl%d", $4)}'`
changequote([, ])dnl
if test "${VERSIONPATCH}" = "pl0" ; then
  VERSIONPATCH=
fi
VERSION="${VERSIONMAJOR}.${VERSIONMINOR}${VERSIONPATCH}"

AC_MSG_RESULT(${VERSION})
if test "${VERSION}" = "0.0pl0" ; then
  AC_MSG_ERROR([Package version number not defined])
fi
AC_SUBST(VERSION)
AC_SUBST(VERSIONMAJOR)
AC_SUBST(VERSIONMINOR)
AC_SUBST(VERSIONPATCH)


dnl Define local macros

AC_DEFUN(GJH_REQUIRE_PROG,
[if test "$1" != "$2";  then
  AC_MSG_ERROR([Cannot find required program $2.])
 fi
])

dnl Setup a disable argument that can be cached properly
dnl $1 is arg name, $2 is "checking" string, $3 is RHS of help

AC_DEFUN(GJH_ARG_DISABLE,
[
  AC_ARG_ENABLE([$1], AC_HELP_STRING([--disable-$1],[$3]),
    [
      AC_MSG_CHECKING([$2])
      if test "$enableval" = "no"; then
        ac_cv_option_$1=no
      else
        ac_cv_option_$1=yes
      fi
      AC_MSG_RESULT($ac_cv_option_$1)
    ],
    AC_CACHE_CHECK([$2], ac_cv_option_$1, [ac_cv_option_$1=yes])
  )
])


dnl Setup a with argument that can be cached properly
dnl $1 is arg name, $2 is "checking" string, $3 is RHS of with string
dnl $4 is the description part of help string, $5 is default value

AC_DEFUN(GJH_ARG_WITH,
[
  rhs=`echo $1 | tr '-' '_'`
  AC_ARG_WITH([$1],
    AC_HELP_STRING([--with-$1=$3], [Set the $4 to "$3" (default is $5)]),
    [
      AC_MSG_CHECKING([$2]) 
      if test "x$withval" = "x"; then 
        with_out=$5
      else
        with_out=$withval
      fi
      AC_MSG_RESULT($with_out)
    ],
    AC_CACHE_CHECK([$2], with_out, [with_out=$5])
  )
  set ac_cv_option_$rhs="$with_out"
  unset rhs
  unset with_out
])



dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LEX
AC_PROG_YACC

GJH_REQUIRE_PROG($LEX, flex)
GJH_REQUIRE_PROG($YACC, bison -y)

AC_LANG_C
AC_C_CONST


dnl Check for obstacks
GJH_ARG_DISABLE(obstack, [if obstack support is configured to be enabled],
  [Disable support for obstacks])

if test "$ac_cv_option_obstack" = "yes"; then
  AC_FUNC_OBSTACK
fi


dnl YYDEBUG enable option
GJH_ARG_DISABLE(yydebug, [if YYDEBUG is configured to be enabled],
  [Shut off the YACC debugging capability])
  
if test "$ac_cv_option_yydebug" = "no"; then
  AC_DEFINE(YYDEBUG, 0, [Enable YACC debugging: 1 for enable, 0 for disable])
else
  AC_DEFINE(YYDEBUG, 1)
fi


dnl Control FIFO settings
dnl $1 is arg name, $2 is "checking" string, $3 is RHS of with string
dnl $4 is the description part of help string, $5 is default value
GJH_ARG_WITH(ctl-fifo, [the diald control FIFO filename], [FIFO],
  [diald control FIFO pipe filename], [/var/run/diald.ctl])

AC_DEFINE_UNQUOTED(CONTROL_FIFO, "$ac_cv_option_ctl_fifo",
		   [Define the diald control FIFO filename])
CONTROL_FIFO=$ac_cv_option_ctl_fifo
AC_SUBST(CONTROL_FIFO)


dnl Conf file settings
GJH_ARG_WITH(conffile, [the diald-top config file filename], [FILE],
  [diald-top config file filename], [/etc/diald-top.conf])

AC_DEFINE_UNQUOTED(CONF_FILE, "$ac_cv_option_conffile",
		   [Define the diald-top config file filename])
CONF_FILE=$ac_cv_option_conffile
AC_SUBST(CONF_FILE)


dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h netdb.h netinet/in.h stdlib.h string.h ])
AC_CHECK_HEADERS([sys/socket.h ncurses.h fcntl.h limits.h malloc.h ])
AC_CHECK_HEADERS([sys/time.h syslog.h unistd.h])

dnl Checks for libraries.
dnl AC_CHECK_LIB(fl, main)
AC_CHECK_LIB(ncurses, printw)

# Extra libraries on some systems
case "${host}" in
  *solaris* )
    AC_CHECK_LIB(socket, socket)
    AC_CHECK_LIB(nsl, bind)
    ;;
esac

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_PID_T
AC_HEADER_TIME

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MEMCMP
AC_FUNC_FORK
AC_TYPE_SIGNAL

AC_CHECK_FUNCS([select socket strdup strstr gethostbyaddr getservbyport])
AC_CHECK_FUNCS([getdomainname atexit memset strcasecmp strncasecmp])

AC_CHECK_FUNCS([inet_pton])
if test $ac_cv_func_inet_pton = no; then
  AC_CHECK_LIB(bind, inet_pton)
  if test $ac_cv_lib_bind_inet_pton = no; then
    AC_MSG_WARN([inet_pton not found. Do you have libbind.a?])
    AC_CHECK_FUNCS([inet_aton])
    if test $ac_cv_func_inet_aton = no; then
      AC_CHECK_LIB(bind, inet_aton)
      if test $ac_cv_func_inet_aton = no -a $ac_cv_lib_bind_inet_aton = no; then
	AC_MSG_ERROR([No inet_pton, no inet_aton. Can't compile diald-top.])
      fi
    fi
    AC_MSG_RESULT([ok, will use inet_aton instead])
  else
    AC_DEFINE(HAVE_INET_PTON,1)
  fi
else
  AC_DEFINE(HAVE_INET_PTON,1)
fi
AC_CHECK_FUNCS([inet_ntoa])

AC_MINGW32
AC_EXEEXT
AC_OBJEXT

AC_CACHE_SAVE
AC_OUTPUT(Makefile Makefile.def server/Makefile client/Makefile client/version.h diald-top.8)
